[user]
    name = Santiago Toscanini
    email = github@account.toscanini.me
    signingkey = /Users/stoscanini/.ssh/id_ed25519_personal
[core]
    autocrlf = input
    sshCommand = ssh -i /Users/stoscanini/.ssh/id_ed25519_personal
    pager = delta
[url "git@github.com:"]
    insteadOf = https://github.com/
[includeIf "gitdir:~/dev/work/"]
    path = "~/.config/git/config.work"
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
[diff]
    colorMoved = default
    algorithm = histogram
    submodule = log
[pager]
    difftool = true
[status]
    submoduleSummary = true
[log]
    date = iso

[submodule]
    recurse = true
[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph

    # View the current working tree status using the short format.
    s = status -s

    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Clone a repository including all submodules.
    c = clone --recursive

    # Commit all changes.
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose

    # List aliases.
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. delete merged
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Commit dotfiles
    dotfiles = "!source $XDG_CONFIG_HOME/git/git.alias.zsh && commitDotfiles"
    df = dotfiles

    # Commit notes
    obsidian = "!source $XDG_CONFIG_HOME/git/git.alias.zsh && commitNotes"
    obs = obsidian

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email
[pull]
    rebase = false
[merge]
    conflictStyle = zdiff3
    tool = nvim
[rerere]
    enabled = true
[fetch]
    # Automatically prune stale branches.
    prune = true
[init]
    defaultBranch = main
[branch]
    sort = -committerdate
[help]
    # Automatically correct and execute mistyped commands after prompting
    autocorrect = prompt
[commit]
    gpgsign = true
    verbose = true
[tag]
    gpgsign = true
    sort = taggerdate
[gpg]
    # To use this we need an SSH version greater than 8.8 (to sign arbitrary data)
    format = ssh
[gpg "ssh"]
    allowedSignersFile = ~/.ssh/allowed_signers
[push]
    autoSetupRemote = true
    default = current
[column]
    ui = auto
[maintenance]
	repo = /Users/stoscanini/dev/work/fabric/fabric-service
