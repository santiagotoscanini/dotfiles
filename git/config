# ===========================================
# Global Git Configuration
# ===========================================

# =========== User Information ===========
[user]
    name = Santiago Toscanini
    signingkey = /Users/stoscanini/.ssh/id_personal
    # useConfigOnly = true  # Uncomment to force explicit email setup per repo

# =========== Core Settings ===========
[core]
    autocrlf = input         # Convert CRLF to LF on commit but not the other way around
    pager = delta            # Use delta for enhanced diff viewing
    sshCommand = ssh -i /Users/stoscanini/.ssh/id_personal  # Default SSH key
    # fsmonitor = true         # Use filesystem monitor for faster status
    untrackedCache = true    # Cache untracked files for performance

# =========== URL Rewriting ===========
[url "git@github.com:"]
    insteadOf = https://github.com/  # Use SSH instead of HTTPS for GitHub

# =========== Conditional Includes ===========
# Load different config files based on the repository location
# https://www.benji.dog/articles/git-config/
[includeIf "gitdir:~/dev/personal/"]
    path = "~/.config/git/config.personal"
[includeIf "gitdir:~/dev/work/"]
    path = "~/.config/git/config.work"

# =========== Diff Settings ===========
[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true          # Use n and N to move between diff sections
    light = false            # Set to true if using a light terminal background
    side-by-side = false     # Set to true for split view
    line-numbers = true      # Show line numbers
    hyperlinks = true        # Enable hyperlinks

[diff]
    colorMoved = default     # Show moved lines differently
    algorithm = histogram    # More accurate diff algorithm
    submodule = log          # Show log for submodules
    renames = copies         # Detect renames and copies
    indentHeuristic = true   # Improve diff readability

[pager]
    difftool = true          # Use pager for difftool output

# =========== Status and Log ===========
[status]
    submoduleSummary = true  # Show submodule summary in status
    showUntrackedFiles = all # Show all untracked files

[log]
    date = iso               # ISO date format in logs
    abbrevCommit = true      # Abbreviated commit hashes

# =========== Submodule Settings ===========
[submodule]
    recurse = true           # Recursively operate on submodules

# =========== Color Settings ===========
[color]
    ui = auto                # Colorize UI when possible

[color "diff"]
    meta = yellow bold
    frag = magenta bold      # Line info
    old = red                # Deletions
    new = green              # Additions

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# =========== Aliases ===========
[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Show diff between current state and n commits ago
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = pull --recurse-submodules

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose

    # List aliases
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Commit dotfiles
    dotfiles = "!source $XDG_CONFIG_HOME/git/git.alias.zsh && commitDotfiles"
    df = dotfiles

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository
    whoami = config user.email
    
    # Undo the last commit but keep changes
    undo = reset --soft HEAD^
    
    # Show a tree of the repository
    tree = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all

# =========== Branch and Merge ===========
[pull]
    rebase = false           # Merge by default (change to true for rebase)

[merge]
    conflictStyle = zdiff3   # Show better context in conflicts
    tool = nvim              # Use Neovim for merge conflicts
    # ff = only                # Fast-forward only by default

[rerere]
    enabled = true           # Reuse recorded resolution

[fetch]
    prune = true             # Automatically prune stale branches

[branch]
    sort = -committerdate    # Sort by most recent commit
    autoSetupMerge = true    # Setup merge tracking by default

[init]
    defaultBranch = main     # Set default branch to main

# =========== Help and Autocorrection ===========
[help]
    autocorrect = prompt     # Prompt before autocorrecting commands

# =========== Commit and Signing ===========
[commit]
    gpgsign = true           # Sign all commits
    verbose = true           # Show diff in commit message editor

[tag]
    gpgsign = true           # Sign all tags
    sort = taggerdate        # Sort tags by date

[gpg]
    format = ssh             # Use SSH for signing

[gpg "ssh"]
    allowedSignersFile = ~/.ssh/allowed_signers

# =========== Push Settings ===========
[push]
    autoSetupRemote = true   # Set up tracking branch automatically
    default = current        # Push current branch to same name
    followTags = true        # Include tags when pushing

# =========== UI Settings ===========
[column]
    ui = auto                # Columnize output when possible

# =========== Repository Maintenance ===========
[maintenance]
    repo = /Users/stoscanini/dev/work/fabric/fabric-service
    auto = true              # Enable automatic maintenance
    strategy = incremental   # Use incremental maintenance strategy

# =========== Transfer Settings ===========
[transfer]
    fsckObjects = true       # Check object integrity during transfer

# =========== Advice Settings ===========
[advice]
    detachedHead = false     # Don't show detached HEAD warning
    
# =========== Feature Toggles ===========
[feature]
    manyFiles = true         # Optimize for repositories with many files
